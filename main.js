// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(document).ready(function() {
    var accounts_select_box, actions_options, checkboxes, create_account, create_account_modal, create_project, delete_project, delete_project_btn, error_alert, fetch_issues, fetch_issues_btn, gitlab_url, load_and_show_accounts, load_and_show_projects, load_issues, load_project, new_project_options, project_name_input, projects_select_box, show_error, show_issues, show_issues_btn;
    load_and_show_projects = function(select_last) {
      var i, index, len, parts, project, projects;
      if (select_last == null) {
        select_last = false;
      }
      projects_select_box.empty().append("<option value='choose' disabled>Choose project</option>");
      if (localStorage.getItem("projects")) {
        projects = JSON.parse(localStorage.getItem("projects"));
        for (index = i = 0, len = projects.length; i < len; index = ++i) {
          project = projects[index];
          parts = project.name.split("/");
          projects_select_box.append("<option value='" + index + "'>" + parts[1] + " (" + parts[0] + ")</option>");
        }
        if (select_last) {
          projects_select_box.val("" + (index - 1));
        }
      } else {
        projects = [];
      }
      if (!select_last) {
        if (window.project_index != null) {
          projects_select_box.val(window.project_index || "choose");
        } else {
          projects_select_box.val("choose");
          delete_project_btn.prop("disabled", true);
        }
      }
      return projects;
    };
    create_project = function(name, base_url, account_id, kind) {
      var new_project, project;
      if (base_url && name && (account_id != null)) {
        if (name[name.length - 1] !== "/") {
          name += "/";
        }
        base_url = checkboxes.filter(":checked").closest(".radio").siblings("input").val();
        if (base_url[base_url.length - 1] !== "/") {
          base_url += "/";
        }
        if (indexOf.call((function() {
          var i, len, ref, results;
          ref = window.projects;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            project = ref[i];
            results.push(project.name);
          }
          return results;
        })(), name) >= 0) {
          throw new Error("Project '" + name + "' already exists.");
        }
        new_project = {
          base_url: base_url,
          name: name,
          account_id: account_id,
          kind: kind
        };
        projects.push(new_project);
        localStorage.setItem("projects", JSON.stringify(projects));
        load_and_show_projects(true);
        $(".modal").modal("hide");
        new_project_options.slideUp(200);
        return new_project;
      }
      throw new Error("Invalid data given.");
    };
    delete_project = function(project_index) {
      if ((0 <= project_index && project_index < window.projects.length)) {
        window.projects.splice(project_index, 1);
        localStorage.setItem("projects", JSON.stringify(projects));
        window.project_index = null;
        load_and_show_projects();
        return true;
      }
      throw new Error("Cannot delete project at index " + project_index);
    };
    load_project = function(project_index) {
      console.log(project_index);
      if ((0 <= project_index && project_index < window.projects.length)) {
        window.project_index = project_index;
        actions_options.find(".btn").prop("disabled", false);
        delete_project_btn.prop("disabled", false);
        return true;
      }
      throw new Error("Cannot load project at index " + project_index);
    };
    load_and_show_accounts = function(select_last) {
      var account, accounts, i, index, len;
      accounts_select_box.empty().append("<option value='choose' disabled>Choose account</option>");
      if (localStorage.getItem("accounts")) {
        accounts = JSON.parse(localStorage.getItem("accounts"));
        for (index = i = 0, len = accounts.length; i < len; index = ++i) {
          account = accounts[index];
          accounts_select_box.append("<option value='" + index + "'>" + account.name + "</option>");
        }
        accounts_select_box.val("" + (index - 1));
      } else {
        accounts = [];
      }
      if (!select_last) {
        accounts_select_box.val("choose");
      }
      return accounts;
    };
    create_account = function(user_name, auth_token, is_default) {
      var account, i, len, new_account, ref;
      if (user_name && auth_token) {
        if (indexOf.call((function() {
          var i, len, ref, results;
          ref = window.accounts;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            account = ref[i];
            results.push(account.name);
          }
          return results;
        })(), user_name) >= 0) {
          throw new Error("Account '" + user_name + "' already exists.");
        }
        if (is_default) {
          ref = window.accounts;
          for (i = 0, len = ref.length; i < len; i++) {
            account = ref[i];
            account.is_default = false;
          }
        }
        new_account = {
          name: user_name,
          token: auth_token,
          is_default: is_default
        };
        window.accounts.push(new_account);
        localStorage.setItem("accounts", JSON.stringify(window.accounts));
        load_and_show_accounts(true);
        $(".modal").modal("hide");
        return new_account;
      }
      throw new Error("Invalid data given.");
    };
    load_issues = function() {
      if (localStorage.getItem("issues")) {
        return JSON.parse(localStorage.getItem("issues"));
      }
      return [];
    };
    show_issues = function(project_index) {
      var data;
      data = projects[project_index];
      if (data != null) {
        $.get("", {}, function() {});
      }
      throw new Error("Could not find a project at index " + project_index + ".");
    };
    fetch_issues = function(project_index) {
      var data;
      data = projects[project_index];
      if (data != null) {
        $.get("", {}, function() {});
      }
      throw new Error("Could not find a project at index " + project_index + ".");
    };
    show_error = function(message) {
      $(".modal").modal("hide");
      error_alert.fadeIn(200).find(".content").empty().append(message);
      return true;
    };
    delete_project_btn = $(".delete_project");
    new_project_options = $(".new_project_options");
    checkboxes = $("[name='vcs']");
    project_name_input = $(".project_name");
    projects_select_box = $(".projects");
    accounts_select_box = $(".accounts");
    actions_options = $(".actions_options");
    show_issues_btn = $(".show_issues");
    fetch_issues_btn = $(".fetch_issues");
    create_account_modal = $("#create_account_modal");
    error_alert = $(".alert.error");
    window.projects = load_and_show_projects();
    window.project_index = null;
    window.accounts = load_and_show_accounts();
    window.issues = load_issues();
    console.log(projects);
    projects_select_box.change(function() {
      var index;
      index = projects_select_box.find("option:selected").val();
      if (index !== "choose") {
        load_project(parseInt(index, 10));
      }
      return true;
    });
    $(".new_project").click(function() {
      new_project_options.slideToggle(200);
      return true;
    });
    delete_project_btn.click(function() {
      delete_project(window.project_index);
      return true;
    });
    $(".user_icon").click(function() {
      $(this).closest(".row").children().not(":first").fadeToggle(200);
      return true;
    });
    $(".create_project").click(function() {
      var error, error1;
      try {
        create_project(project_name_input.val(), checkboxes.filter(":checked").closest(".radio").siblings("input").val(), accounts_select_box.find("option:selected").val(), checkboxes.filter(":checked").val());
      } catch (error1) {
        error = error1;
        show_error(error.message);
      }
      return true;
    });
    $(".create_account").click(function() {
      var error, error1;
      try {
        create_account(create_account_modal.find(".user_name").val(), create_account_modal.find(".auth_token").val(), create_account_modal.find("input[type='checkbox']").prop("checked"));
      } catch (error1) {
        error = error1;
        show_error(error.message);
      }
      return true;
    });
    gitlab_url = $(".gitlab_url");
    checkboxes.change(function(event) {
      gitlab_url.prop("disabled", !gitlab_url.prop("disabled"));
      return true;
    });
    error_alert.find(".close").click(function() {
      error_alert.fadeOut(200);
      return true;
    });
    fetch_issues_btn.click(function() {
      if (window.project_index != null) {
        fetch_issues(window.project_index);
        return true;
      }
      throw new Error("There is no current project.");
    });
    return true;
  });

}).call(this);
