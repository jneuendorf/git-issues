// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(document).ready(function() {
    var accounts_select_box, actions_options, checkboxes, create_account, create_account_modal, create_project, delete_project, delete_project_btn, error_alert, fetch_issues, fetch_issues_btn, fill_in_options, gitlab_url, issues_output, load_and_show_accounts, load_and_show_projects, load_issues, load_project, new_project_options, parse_date_string, project_name_input, project_owner_input, project_url, projects_select_box, show_error, show_issues, show_issues_btn;
    load_and_show_projects = function(select_last) {
      var i, index, len, project, projects;
      if (select_last == null) {
        select_last = false;
      }
      projects_select_box.empty().append("<option value='choose' disabled>Choose project</option>");
      if (localStorage.getItem("projects")) {
        projects = JSON.parse(localStorage.getItem("projects"));
        for (index = i = 0, len = projects.length; i < len; index = ++i) {
          project = projects[index];
          projects_select_box.append("<option value='" + index + "'>" + project.name + " (" + project.owner + ")</option>");
        }
        if (select_last) {
          projects_select_box.val("" + (index - 1));
          load_project(index - 1);
        }
      } else {
        projects = [];
      }
      if (!select_last) {
        if (window.project_index != null) {
          projects_select_box.val(window.project_index);
        } else {
          projects_select_box.val("choose");
          delete_project_btn.prop("disabled", true);
        }
      }
      return projects;
    };
    fill_in_options = function() {
      var kind, url;
      url = project_url.val();
      if (url.indexOf("github.com") >= 0) {
        kind = "github";
      } else {
        kind = "gitlab";
      }
      checkboxes.filter("[value='" + kind + "']").prop("checked", true);
      return true;
    };
    create_project = function(owner, name, base_url, account_id, kind) {
      var new_project, project;
      if (owner && name && base_url && (account_id != null)) {
        base_url = checkboxes.filter(":checked").closest(".radio").siblings("input").val();
        if (base_url[base_url.length - 1] !== "/") {
          base_url += "/";
        }
        if (indexOf.call((function() {
          var i, len, ref, results;
          ref = window.projects;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            project = ref[i];
            results.push(project.name);
          }
          return results;
        })(), name) >= 0) {
          throw new Error("Project '" + name + "' already exists.");
        }
        new_project = {
          owner: owner,
          name: name,
          base_url: base_url,
          account_id: account_id,
          kind: kind
        };
        projects.push(new_project);
        localStorage.setItem("projects", JSON.stringify(projects));
        load_and_show_projects(true);
        $(".modal").modal("hide");
        new_project_options.slideUp(200);
        return new_project;
      }
      throw new Error("Invalid data given.");
    };
    delete_project = function(project_index) {
      if ((0 <= project_index && project_index < window.projects.length)) {
        window.projects.splice(project_index, 1);
        localStorage.setItem("projects", JSON.stringify(projects));
        window.project_index = null;
        load_and_show_projects();
        return true;
      }
      throw new Error("Cannot delete project at index " + project_index);
    };
    load_project = function(project_index) {
      console.log(project_index);
      if ((0 <= project_index && project_index < window.projects.length)) {
        window.project_index = project_index;
        new_project_options.slideUp(200);
        actions_options.find(".btn").prop("disabled", false);
        delete_project_btn.prop("disabled", false);
        return true;
      }
      throw new Error("Cannot load project at index " + project_index);
    };
    load_and_show_accounts = function(select_last) {
      var account, accounts, i, index, len;
      accounts_select_box.empty().append("<option value='choose' disabled>Choose account</option>");
      if (localStorage.getItem("accounts")) {
        accounts = JSON.parse(localStorage.getItem("accounts"));
        for (index = i = 0, len = accounts.length; i < len; index = ++i) {
          account = accounts[index];
          accounts_select_box.append("<option value='" + index + "'>" + account.name + "</option>");
        }
        accounts_select_box.val("" + (index - 1));
      } else {
        accounts = [];
      }
      if (!select_last) {
        accounts_select_box.val("choose");
      }
      return accounts;
    };
    create_account = function(user_name, auth_token, is_default) {
      var account, i, len, new_account, ref;
      if (user_name && auth_token) {
        if (indexOf.call((function() {
          var i, len, ref, results;
          ref = window.accounts;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            account = ref[i];
            results.push(account.name);
          }
          return results;
        })(), user_name) >= 0) {
          throw new Error("Account '" + user_name + "' already exists.");
        }
        if (is_default) {
          ref = window.accounts;
          for (i = 0, len = ref.length; i < len; i++) {
            account = ref[i];
            account.is_default = false;
          }
        }
        new_account = {
          name: user_name,
          token: auth_token,
          is_default: is_default
        };
        window.accounts.push(new_account);
        localStorage.setItem("accounts", JSON.stringify(window.accounts));
        load_and_show_accounts(true);
        $(".modal").modal("hide");
        return new_account;
      }
      throw new Error("Invalid data given.");
    };
    parse_date_string = function(date_str) {
      var date_parts, month_names, parts, time_parts;
      month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      parts = date_str.slice(0, -1).split("T");
      date_parts = parts[0].split("-");
      time_parts = parts[1].split(":");
      return {
        date: date_parts[2] + " " + month_names[parseInt(date_parts[1], 10)] + " " + date_parts[0],
        time: time_parts[0] + ":" + time_parts[1]
      };
    };
    load_issues = function() {
      if (localStorage.getItem("issues")) {
        return JSON.parse(localStorage.getItem("issues"));
      }
      return [];
    };

    /*
    {
      "url": "https://api.github.com/repos/mishoo/UglifyJS/issues/520",
      "labels_url": "https://api.github.com/repos/mishoo/UglifyJS/issues/520/labels{/name}",
      "comments_url": "https://api.github.com/repos/mishoo/UglifyJS/issues/520/comments",
      "events_url": "https://api.github.com/repos/mishoo/UglifyJS/issues/520/events",
      "html_url": "https://github.com/mishoo/UglifyJS/pull/520",
      "id": 110745545,
      "number": 520,
      "title": "Update README.org",
      "user": {
        "login": "jareddbc",
        "id": 4805277,
        "avatar_url": "https://avatars.githubusercontent.com/u/4805277?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jareddbc",
        "html_url": "https://github.com/jareddbc",
        "followers_url": "https://api.github.com/users/jareddbc/followers",
        "following_url": "https://api.github.com/users/jareddbc/following{/other_user}",
        "gists_url": "https://api.github.com/users/jareddbc/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jareddbc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jareddbc/subscriptions",
        "organizations_url": "https://api.github.com/users/jareddbc/orgs",
        "repos_url": "https://api.github.com/users/jareddbc/repos",
        "events_url": "https://api.github.com/users/jareddbc/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jareddbc/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
    
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "milestone": null,
      "comments": 0,
      "created_at": "2015-10-09T22:23:37Z",
      "updated_at": "2015-10-09T22:23:37Z",
      "closed_at": null,
      "pull_request": {
        "url": "https://api.github.com/repos/mishoo/UglifyJS/pulls/520",
        "html_url": "https://github.com/mishoo/UglifyJS/pull/520",
        "diff_url": "https://github.com/mishoo/UglifyJS/pull/520.diff",
        "patch_url": "https://github.com/mishoo/UglifyJS/pull/520.patch"
      },
      "body": ""
    }
     */
    show_issues = function(project_index) {
      var _issues, created_at, i, issue, len, res;
      _issues = window.issues[project_index];
      if (_issues != null) {
        res = "";
        for (i = 0, len = _issues.length; i < len; i++) {
          issue = _issues[i];
          created_at = parse_date_string(issue.created_at);
          res += "<div class=\"row issue\">\n    <div class=\"col-xs-1 icon\">\n        <span class=\"octicon octicon-git-pull-request open\"></span>\n    </div>\n    <div class=\"col-xs-10\">\n        <h4>" + issue.title + "</h4>\n        #" + issue.number + " updated on " + created_at.date + " at " + created_at.time + "\n    </div>\n    <div class=\"col-xs-1\">\n        <span class=\"octicon octicon-comment\"></span>\n    </div>\n</div>";
        }
        issues_output.empty().append(res);
        return true;
      }
      throw new Error("Could not find a project at index " + project_index + ".");
    };
    fetch_issues = function(project_index) {
      var account_data, project_data, suffix, url;
      project_data = projects[project_index];
      if (project_data != null) {
        account_data = window.accounts[project_data.account_id];
        url = api_definitions[project_data.kind].url(project_data.base_url);
        suffix = api_definitions[project_data.kind].fetch_all(project_data.owner, project_data.name, account_data.token);
        $.get(url + suffix, function(response) {
          window.issues[project_index] = response;
          localStorage.setItem("issues", JSON.stringify(window.issues));
          show_issues(project_index);
          return true;
        });
        return true;
      }
      throw new Error("Could not find a project at index " + project_index + ".");
    };
    show_error = function(message) {
      $(".modal").modal("hide");
      error_alert.fadeIn(200).find(".content").empty().append(message);
      return true;
    };
    delete_project_btn = $(".delete_project");
    project_url = $(".project_url");
    new_project_options = $(".new_project_options");
    checkboxes = $("[name='vcs']");
    project_owner_input = $(".project_owner");
    project_name_input = $(".project_name");
    projects_select_box = $(".projects");
    accounts_select_box = $(".accounts");
    issues_output = $(".issues");
    actions_options = $(".actions_options");
    show_issues_btn = $(".show_issues");
    fetch_issues_btn = $(".fetch_issues");
    create_account_modal = $("#create_account_modal");
    error_alert = $(".alert.error");
    window.projects = load_and_show_projects();
    window.project_index = null;
    window.accounts = load_and_show_accounts();
    window.issues = load_issues();
    console.log(projects);
    projects_select_box.change(function() {
      var index;
      index = projects_select_box.find("option:selected").val();
      if (index !== "choose") {
        load_project(parseInt(index, 10));
      }
      return true;
    });
    project_url.keyup(function(event) {
      fill_in_options();
      return true;
    });
    $(".new_project").click(function() {
      new_project_options.slideToggle(200);
      return true;
    });
    delete_project_btn.click(function() {
      delete_project(window.project_index);
      return true;
    });
    $(".user_icon").click(function() {
      $(this).closest(".row").children().not(":first").fadeToggle(200);
      return true;
    });
    $(".create_project").click(function() {
      var error, error1;
      try {
        create_project(project_owner_input.val(), project_name_input.val(), checkboxes.filter(":checked").closest(".radio").siblings("input").val(), accounts_select_box.find("option:selected").val(), checkboxes.filter(":checked").val());
      } catch (error1) {
        error = error1;
        show_error(error.message);
      }
      return true;
    });
    $(".customize_project").click(function() {
      $(".customize_project_target").slideToggle(200);
      $(this).find("span").toggleClass("glyphicon-chevron-down glyphicon-chevron-up");
      return true;
    });
    $(".create_account").click(function() {
      var error, error1;
      try {
        create_account(create_account_modal.find(".user_name").val(), create_account_modal.find(".auth_token").val(), create_account_modal.find("input[type='checkbox']").prop("checked"));
      } catch (error1) {
        error = error1;
        show_error(error.message);
      }
      return true;
    });
    gitlab_url = $(".gitlab_url");
    checkboxes.change(function(event) {
      gitlab_url.prop("disabled", !gitlab_url.prop("disabled"));
      return true;
    });
    error_alert.find(".close").click(function() {
      error_alert.fadeOut(200);
      return true;
    });
    fetch_issues_btn.click(function() {
      if (window.project_index != null) {
        fetch_issues(window.project_index);
        return true;
      }
      throw new Error("There is no current project.");
    });
    show_issues_btn.click(function() {
      show_issues(window.project_index);
      return true;
    });
    return true;
  });

}).call(this);
